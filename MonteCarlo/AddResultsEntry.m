% COPYRIGHT NOTICE 
 % This file is part of a dataset <Minar, Martin (2023), “Influence of surface energy anisotropy on nucleation and crystallographic texture of polycrystalline deposits”, Mendeley Data, V1, doi: 10.17632/bsdff8shbz.1>, coupled to publication of the same name by Minar, Moelans submitted to Computational Materials Science in September 2023. 
 % Distributed under GPLv3 license.
%results = AddResultsEntry(databasefilename,input,comment)
%
% databasefilename  ... must include *.mat ; contains structure array 'results'
%                               - if nonexistent, the file is created and the current entry added to first line
% input                      ... structure generated by inputfile_GGaniso
% comment               ... string
% 


function results = AddResultsEntry(databasefilename,input,comment,varargin)
    %% initialize current entry
    currententry = input;
    if isempty(varargin)
        disp('Only input structure added to the database, no additional fields appended.')
    else
        varnames = varargin{1};
        resultscell = varargin{2};
%         for k = 2:length(varargin)
%             resultscell{k-1} = varargin{k};
%         end

        mismatching_names = WarnAndReturn_MismatchingNames(varnames,resultscell);
        if mismatching_names 
            return
        end

        for k = 1:length(varnames)
            currententry.(varnames{k}) = resultscell{k};
        end
    end
    
    %obtain line number
    if exist(databasefilename,'file') == 0 % if such file does not exist
        newID = 1; % start counting from one
    else
        load(databasefilename,'results')
%         entriescount = results(end).runID; % ID of the last run equals number of entries
        entriescount = length(results); % the number of entries in results
        newID = entriescount + 1;
    end
    
    currententry.runID = newID; % in case of need you can use num2str(newID,'%2.2i') to have two-digit annotation, i.e. 1 => 01, 5 => 05 etc...
    currententry.comment = comment;
    currententry.timestamp = datestr(clock);
    
    % rearrange fields to have ID and comment first
    fieldscount = length(fieldnames(currententry));
    indID = fieldscount-2;
    indcomment = fieldscount-1;
    indtimestamp = fieldscount;
    permutation = [indID indcomment indtimestamp 1:(fieldscount-3) ];
    currententry = orderfields(currententry,permutation);
    
    if exist(databasefilename,'file') == 2 % database file exists and it is a *.mat file
        [results,currententry] = CreateNonexistentFields(results,currententry);
    end
    
    
    % assign currententry to new line in results
    results(newID) = currententry;
    
    if ~isempty(databasefilename)
        save(databasefilename,'results')
    end

    end

%% ReturnForInvalidResultsInput
function mismatching_names = WarnAndReturn_MismatchingNames(varnames,resultscell)
    mismatching_names = false;
    if length(resultscell)~=length(varnames)
        warning('Invalid input: not matching number of names for the results variables. !! No entry added to the results database. ')
        mismatching_names = true;
    end
end

%%
function [results,currententry] = CreateNonexistentFields(results,currententry)
    fieldnamesOLD = fieldnames(results);
    fieldnamesNEW = fieldnames(currententry);
    uniqueNEW = setdiff(fieldnamesNEW,fieldnamesOLD);
    uniqueOLD = setdiff(fieldnamesOLD,fieldnamesNEW);
    
    for k = 1:length(uniqueNEW) % the missing field
        for row = length(results) % the number of rows of results - that mamy times the new field must be added
            results(row).(uniqueNEW{k}) = [];
        end
    end
    
    for k = 1:length(uniqueOLD)
        currententry.(uniqueOLD{k}) = [];
    end

end